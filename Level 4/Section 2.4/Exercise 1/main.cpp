/*
    Author: Ian Meyer
    Description: Testing the new operators
*/

#include "point.hpp"
#include "line.hpp"
#include "circle.hpp"
#include <iostream>


int main(void){

    //Define points, line, and circle

    Point pt1(2,2);
    Point pt2(5,5);
    Line ln(pt1, pt2);
    Circle circ(pt1, 5.0);

    std::cout << "Point 1 is: " << pt1.ToString() << std::endl;
    std::cout << "Point 2 is: " << pt2.ToString() << std::endl;
    std::cout << "Line is: " << ln.ToString() << std::endl;
    std::cout << "Circle is: " << circ.ToString() << std::endl;

    //Instantiate the following
    Point test_pt;
    Line test_ln;
    Circle test_circ;


    //Test the point operators

    // Test the equaltiy operator
    //We can use this syntax... which is interesting
    test_pt.operator=(pt1);
    std::cout << "Test point with = (generated by strange syntax) is: " << test_pt.ToString() << std::endl;
    
    test_pt = pt2;
    std::cout << "Test point with = is: " << test_pt.ToString() << std::endl;

    //Test the - operator
    Point negation = -test_pt;
    std::cout << "Negation of test point with -  is: " << negation.ToString() << std::endl;

    //Test the * Operator
    std::cout << "Scalar multiplication of test point with * and scalar 5  is: " << (test_pt*5).ToString() << std::endl;


    //Test the + operator
    std::cout << "Addition with test_pt and negation is: " << (test_pt+negation).ToString() << std::endl;

    //Test the == operator

    std::cout << "Equality comparison with == between test_pt and Point(test_pt) (should be True or 1) " << (test_pt==Point(test_pt)) << std::endl;

    //Test the *= operator
    test_pt *= 5;
    std::cout << "Scaling the coords of test_pt by 5 using *= is: " << test_pt.ToString() << std::endl;



    //Test the Line operator

    Line new_line=ln;
    std::cout << "Old line is: " << ln.ToString() << std::endl;
    std::cout << "New line is: " << new_line.ToString() << std::endl;


    //Test the circle operator

    Circle new_circ = circ;
    std::cout << "Old circle is: " << circ.ToString() << std::endl;
    std::cout << "New circle is: " << new_circ.ToString() << std::endl;



    return 0;
}